@charset "UTF-8";
* {
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
}
.container {
    background: coral;
    display: flex;
    margin: 0 0 20px 0;
}
.container > div,
.container > span {
    width: 100px;
    /* height: auto; */
    height: 100px;
    padding: 7px;
    background: cornsilk;
    font-size: 30px;
    border: 1px solid crimson;
    text-align: center;
}
.container.flexdir {
    flex-direction: row;
    /* flex-direction: column; */
    /* flex-direction: row-reverse; */
    /* flex-direction: column-reverse; */
}
.container.flexWrap {
    /* width: 40%; */
    /* height: 100px; */
    /* flex-wrap: nowrap; */
    flex-wrap: wrap;
    /* flex-wrap: wrap-reverse; */
}
.container.flexFlow {
    width: 50%;
    height: 500px;
    /* flex-flow: row nowrap; */
    /* flex-flow: row wrap; */
    /* flex-flow: column nowrap; */
    /* flex-flow: column wrap; */
    /* flex-flow: column wrap-reverse; */
}
/* flex-wrap과 flex-flow에서 부모의 사이즈가 지정되어있고,하위객체의 사이즈가 지정 되지 않은 경우에는 객체에 stretch의 효과로 부모를 덮어버린다, 객체의 사이즈가 지정 된 경우 부모 세로값 기준으로 row가 등간격으로 벌어진다. 하지만 세로기준 space-between하고는 느낌이 다르다.*/
/* flex-wrap: nowrap;의 경우 지정된 부모객체에 직선으로 맞추기 위해 하위객체의 사이즈가 재조정 되는데, content만 남겨놓고 리사이징이 되서 더이상 줄일 영역이 없으면 부모를 뚫고 나간다 */

.container.jc {
    /* width: 70%; */
    /* justify-content: flex-start; */
    /* justify-content: flex-end; */
    /* justify-content: center; */
    justify-content: space-between;
    justify-content: space-around;
}
/* .container > div:nth-child(3),
.container > div:nth-child(5){
    height: 200px;
    margin: 60px 0 150px;
} */
.container.ai {
    height: 300px;
    /* align-items: flex-start; */
    /* align-items: flex-end; */
    /* align-items: center; */
    /* align-items: baseline; */
    align-items: stretch;
}

/* .container.ai > div:nth-child(2){
    font-size: 80px;
    padding: 20px 0
} */
/* .container.ac > div{
    height: 60px;
} */
.container.ac {
    /* width: 30%; */
    height: 700px;
    flex-wrap: wrap;
    /* align-content: flex-start; */
    /* align-content: flex-end; */
    /* align-content: center; */
    /* align-content: space-between; */
    /* align-content: space-around; */
    /* align-content: stretch; */
}

.container.pivot {
    margin: 200px 0;
    width: 50%;
    height: 700px;
    flex-direction: column;
    /* justify-content: space-between; */
    /* justify-content: flex-end; */
    /* align-items: center; */
    /* flex-wrap: wrap; */
    align-content: center;
}
.container.edge > div {
    margin: 0 auto;
}
.container.edge > div:nth-child(3) {
    margin: 50px auto 100px;
}
.container.gap {
    width: 50%;
    flex-flow: row wrap;
    gap: 10px;
    /* gap: calc(20px + 10%);   */
    /* gap: 50px 20px; */
    /* gap: 20%; */
    /* gap: 0; */
}
/* .container.gap > div{
    flex: 1 1 49%;
} */
.container.gap > div:first-child,
.container.gap > div:last-child {
    flex: 1 1 100%;
}
.container.gap > div:nth-child(2),
.container.gap > div:nth-child(3) {
    flex: 1 1 45%;
}
.container.gap > div:nth-child(4),
.container.gap > div:nth-child(5),
.container.gap > div:nth-child(6) {
    flex: 1 1 30%;
}
/* 한 판을 자식들로 다 메우는 조건과 flex-grow/shirink로 늘고 줄어 쫀득거리게 채워진다는 조건 모두를 충족시켜 다양한 사이즈로 부모를 채울 수 있다. gap에서 나오는 여백을 제외한 나머지 요소의 합이 100%가 안되게 조정을 하면 한 박스 안에 다 담을 수 있고 원하는 사이즈로 배치가 가능하다. */



/* flex items */
/* flex items는 self 속성이며 부모에 display:flex가 선언되어 있어야 적용된다 */

/* order */
.container .order1 {
    order: 1;
}
.container .order2 {
    order: 2;
}
.container .order3 {
    order: 3;
}
.container .order4 {
    order: 4;
}
.container .order5 {
    order: 5;
}
/* order속성이 선언되지 않은 객체들을 html순서대로 나열하고, 그 다음배치 순서를 지정한다. */


/* flex-grow */
.container.grow > div {
    flex-grow: 1;
}
.container.grow > .grow3 {
    flex-grow: 1;
}


/* flex-shirink */
.container.shirink > div {
    flex-shrink: 0;
    flex-basis: 50%;
}
.container.shirink > .shirink3 {
    flex-shrink: 3;
}
/* flex-basis는 자식의 기본 사이즈 설정이다 */